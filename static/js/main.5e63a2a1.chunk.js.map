{"version":3,"sources":["components/Book.js","components/SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["Book","book","this","props","react_default","a","createElement","className","src","volumeInfo","imageLinks","thumbnail","alt","title","authors","map","author","join","publisher","href","infoLink","target","Component","SearchForm","state","query","setQuery","_this","setState","_this2","htmlFor","type","name","id","placeholder","onChange","e","value","onClick","onSearch","App","books","searchBooks","searchUrl","concat","fetch","then","res","json","items","catch","err","alert","components_SearchForm","components_Book","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAmCeA,0LA3BJ,IACCC,EAASC,KAAKC,MAAdF,KACR,OACEG,EAAAC,EAAAC,cAAA,MACEC,UAAU,QAEVH,EAAAC,EAAAC,cAAA,OACEC,UAAU,sBAEVH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,0BACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,EAAKQ,WAAWC,WAAaT,EAAKQ,WAAWC,WAAWC,UAAY,GAAIC,IAAKX,EAAKY,MAAQZ,EAAKY,MAAQ,OAGrHT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASN,EAAKQ,WAAWI,OACxCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,OAA6BN,EAAKQ,WAAWK,QAAUb,EAAKQ,WAAWK,QAAQC,IAAI,SAAAC,GAAM,OAAIA,IAAQC,KAAK,MAAQ,MAClHb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,iBAA0CN,EAAKQ,WAAWS,UAAYjB,EAAKQ,WAAWS,UAAY,MAClGd,EAAAC,EAAAC,cAAA,KAAGa,KAAMlB,EAAKQ,WAAWW,SAAUC,OAAO,KAA1C,2BAxBOC,cCiCJC,6MA5BbC,MAAQ,CACNC,MAAO,MAGTC,SAAW,SAACD,GACVE,EAAKC,SAAS,CAAEH,mFAGT,IAAAI,EAAA3B,KACP,OACEE,EAAAC,EAAAC,cAAA,WAASC,UAAU,oBACjBH,EAAAC,EAAAC,cAAA,SAAOwB,QAAQ,WACf1B,EAAAC,EAAAC,cAAA,SACEyB,KAAK,OACLC,KAAK,SACLC,GAAG,SACHC,YAAY,YACZC,SAAU,SAACC,GAAD,OAAOP,EAAKH,SAASU,EAAEf,OAAOgB,UAE1CjC,EAAAC,EAAAC,cAAA,UACEgC,QAAS,kBAAMT,EAAK1B,MAAMoC,SAASV,EAAKL,MAAMC,SADhD,kBAxBiBH,aCsCVkB,6MAlCbhB,MAAQ,CACNiB,MAAO,MAGTC,YAAc,SAACjB,GACb,GAAKA,EAAL,CACA,IAAMkB,EAAS,iDAAAC,OAAoDnB,GAEnEoB,MAAMF,GACHG,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GAAG,OAAIpB,EAAKC,SAAS,CAAEa,MAAOM,EAAIE,UACvCC,MAAM,SAAAC,GAAG,OAAIC,MAAM,4DAA6DD,+EAInF,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAC+C,EAAD,CACEd,SAAUrC,KAAKwC,cAEjBtC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACXL,KAAKsB,MAAMiB,MAAM1B,IAAI,SAAAd,GAAI,OACxBG,EAAAC,EAAAC,cAACgD,EAAD,CACErD,KAAMA,EACNsD,IAAKtD,EAAKgC,gBA1BNX,aCMEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.5e63a2a1.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Book extends Component {\n  static propTypes = {\n    book: PropTypes.object.isRequired\n  }\n\n  render() {\n    const { book } = this.props\n    return (\n      <li\n        className=\"book\"\n      >\n        <div\n          className=\"book_img_container\"\n        >\n          <span className=\"book_img_container_img\">\n            <img src={book.volumeInfo.imageLinks ? book.volumeInfo.imageLinks.thumbnail : ''} alt={book.title ? book.title : ''}/>\n          </span>\n        </div>\n        <div className=\"book_content\">\n          <div className='image_placeholder'></div>\n          <div className='content_placeholder'>\n            <div className='title'>{book.volumeInfo.title}</div>\n            <div className='author'>By: {book.volumeInfo.authors ? book.volumeInfo.authors.map(author => author).join(', ') : null}</div>\n            <div className='publisher'>Published By: {book.volumeInfo.publisher ? book.volumeInfo.publisher : null}</div>\n            <a href={book.volumeInfo.infoLink} target='_'>See this Book</a>\n          </div>\n        </div>\n      </li>\n    )\n  }\n}\n\nexport default Book","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass SearchForm extends Component {\n  static propTypes = {\n    onSearch: PropTypes.func.isRequired\n  }\n\n  state = {\n    query: ''\n  }\n\n  setQuery = (query) => {\n    this.setState({ query })\n  }\n\n  render() {\n    return (\n      <section className='search_container'>\n        <label htmlFor=\"search\"></label>\n        <input\n          type=\"text\"\n          name=\"search\"\n          id=\"search\"\n          placeholder=\"Search...\"\n          onChange={(e) => this.setQuery(e.target.value)}\n        />\n        <button\n          onClick={() => this.props.onSearch(this.state.query)}\n        >Search\n        </button>\n      </section>\n    )\n  }\n}\n\nexport default SearchForm","import React, { Component } from 'react'\nimport './App.scss'\nimport Book from './components/Book'\nimport SearchForm from './components/SearchForm'\n\n\nclass App extends Component {\n  state = {\n    books: []\n  }\n\n  searchBooks = (query) => {\n    if (!query) return\n    const searchUrl = `https://www.googleapis.com/books/v1/volumes?q=${query}`\n\n    fetch(searchUrl)\n      .then(res => res.json())\n      .then(res => this.setState({ books: res.items }))\n      .catch(err => alert('An error occured while loading books from Google Maps API', err))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>BOOK FINDER</h1>\n        <SearchForm\n          onSearch={this.searchBooks}\n        />\n        <ul className='books_container'>\n          {this.state.books.map(book =>\n            <Book\n              book={book}\n              key={book.id}\n            />\n          )}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}